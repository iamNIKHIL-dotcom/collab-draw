version: '3.8'

services:
  postgres:
    image: postgres:14-alpine
    container_name: collab-draw-db
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-collabdraw}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  http-backend:
    build:
      context: .
      dockerfile: apps/http-backend/Dockerfile
    container_name: collab-draw-http
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-collabdraw}
      - NODE_ENV=production
      - PORT=3001
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy

  ws-backend:
    build:
      context: .
      dockerfile: apps/ws-backend/Dockerfile
    container_name: collab-draw-ws
    environment:
      - DATABASE_URL=postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@postgres:5432/${POSTGRES_DB:-collabdraw}
      - NODE_ENV=production
      - PORT=3002
    ports:
      - "3002:3002"
    depends_on:
      postgres:
        condition: service_healthy

  web:
    build:
      context: .
      dockerfile: apps/web/Dockerfile
    container_name: collab-draw-web
    environment:
      - NEXT_PUBLIC_HTTP_API_URL=http://localhost:3001
      - NEXT_PUBLIC_WS_API_URL=ws://localhost:3002
      - NODE_ENV=production
    ports:
      - "3000:3000"
    depends_on:
      - http-backend
      - ws-backend

volumes:
  postgres_data: 